#
# Cookbook Name:: neon-sftp-bridge
# Recipe:: default
#
# Copyright 2017, Harald Sitter
#
# All rights reserved - Do Not Redistribute
#

username = 'neon-sftp-bridge'
groupname = username.clone
userhome = "/home/#{username}/"
gopath = userhome
systemd_dir = "#{userhome}/.config/systemd/user"

importpath = 'anongit.kde.org/sysadmin/neon-sftp-bridge.git'
srcdir = "#{gopath}/src/#{importpath}"

ohai 'reload_passwd' do
  action :nothing
  plugin 'etc'
end

group groupname do
  action :create
end

user username do
  home userhome
  group groupname
  manage_home true
  action :create
  notifies :reload, 'ohai[reload_passwd]', :immediately
end

directory "#{userhome}/.ssh" do
  owner username
  group groupname
  mode 0o700
end

# There is no reason to be more dynamic here, so we don't use the ssh cookbook
# but simply write the file as intended.
file "#{userhome}/.ssh/known_hosts" do
  content <<-EOF
# Generated by Chef via neon-sftp-bridge cookbook; additions need to happen there
# racnoss.kde.org SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.1
|1|uEFvafi+/WoBGm7uyAZr5RRWPDQ=|F+xn7OtFn8RNCsMlqs8ax+cbNDo= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMVxqMwduCPVFwPOwBo/bluVKgc2St6irQrnZ62PtxPa1vQZqVweX7mLCbbVc2hcFg8Itzf97D+IWZXW9VT6ado=
# racnoss.kde.org SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.1
|1|cv+1M6EAe5JFgCmw6A/V5t0QBDE=|O8oTuT+XRxme+IJH23k5VooIMzY= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmpfHdwDWqH6QPzgSsgM+8BFOHOf1nNeSQvchQUt78ILHP6N49rsR2LF72ekR2mg0VYXRNhZFjX2oaOJ4Y1cPU1jh2dmavTICYIfqaZvbXzTuIvS4QhL2nHhZyksvnEdbIfdDO45IQ47x/aCWEF33FUWzW4Hj0m/KCXFZClzog5qi3ux5Yhu9Msig7nPaG2nJW0g2IXLn3sVsU3cc/Hs99165MelkdEP+BoPfh20K2iUwviAZvbRsRgypmhyIMbJAvTFs88d/UYghg+ReUuHTH9e6atpWCNZYqpn5dXOES3epeCSdGHFigTRNbZirZzRAGMsZSjB/H6xTSykncKpgb
  EOF
  owner username
  group groupname
  mode 0o600
  action :create
end

# systemd will chdir into this, so it must exist!
directory "#{userhome}/data" do
  owner username
  group groupname
  mode 0o700
end

data_bag_path = Chef::Config[:data_bag_path]
# This falls back to drax because it is our default host and otherwise we
# couldn't provision vagrant because obviously the node name
keys_dir = "#{data_bag_path}/cupboard/ssh-keys/{#{node.name},drax}/neon-sftp-bridge"
keys = Dir.glob("#{keys_dir}/*").select { |x| !x.end_with?('.secret') }
raise "Couldn't find any ssh keys in #{keys_dir}" if keys.empty?
keys.each do |key_file|
  template "#{userhome}/.ssh/#{File.basename(key_file)}" do
    source key_file
    local true
    owner username
    group groupname
    mode 0o600
  end
end

# Go deployment
package 'golang-go'
package 'snapd'
bash 'Installing go' do # Use snapped go to get latest go, our deps may need it.
  code 'snap install --classic go'
end
bash 'Installing go(neon-sftp-bridge)' do
  code "snap run go get -v -u #{importpath}"
  user username
  group groupname
  environment('GOPATH' => gopath)
end
link "#{gopath}/bin/neon-sftp-bridge" do
  to "#{gopath}/bin/neon-sftp-bridge.git"
  owner username
  group groupname
end

# Systemd setup
package %w(libpam-systemd dbus-user-session) # for session management via logind

execute 'enable-linger' do
  command "loginctl enable-linger #{username}"
end

execute 'daemon-reload' do
  command 'systemctl daemon-reload'
end

execute 'daemon-reload-user' do
  command 'systemctl --user daemon-reload'
  user username
  group groupname
  environment lazy {
    { 'DBUS_SESSION_BUS_ADDRESS' =>
      "unix:path=/run/user/#{node['etc']['passwd'][username]['uid']}/bus" }
  }
  action :nothing
end

#   The dbus-user-session installs a bus socket activation, but we need to make
#   sure the user service is being started so systemd controls the socket.
service 'neon-sftp-bridge@dbus' do
  service_name lazy { "user@#{node.fetch('etc').fetch('passwd').fetch(username).fetch('uid')}.service" }
  action %i[restart start]
  not_if { File.exist?("/run/user/#{node.fetch('etc').fetch('passwd').fetch(username).fetch('uid')}/bus") }
end

#   systemd_unit would dump user stuff into /etc/user/... but there they'd still
#   be owned by root which is stupidly daft. So we bypass systemd_unit's create
#   action and instead do it manually in $HOME/.config/...
bash 'creating systemd user dir' do
  code "mkdir -pv #{systemd_dir}"
  creates systemd_dir
  user username
  group groupname
end

file "#{systemd_dir}/neon-sftp-bridge.service" do
  content lazy { File.read("#{srcdir}/neon-sftp-bridge.service") }
  owner username
  group groupname
  mode 0o600
  action :create
end

systemd_unit 'neon-sftp-bridge.service' do
  user username
  notifies :run, 'execute[daemon-reload-user]', :immediately
  action [:enable, :start]
end

# Wire into apache.

include_recipe 'apache2::default'
include_recipe 'apache2::mod_proxy'
include_recipe 'apache2::mod_proxy_http'
include_recipe 'apache2::mod_ssl'
include_recipe 'apache2::mod_headers'

server_name = 'download.kde.internal.neon.kde.org'
document_root = "/var/www/#{server_name}"

directory document_root do
  owner 'www-data'
  group 'www-data'
end

template "#{node['apache']['dir']}/sites-available/#{server_name}.conf" do
  source "#{server_name}.conf.erb"
  owner 'root'
  group node['apache']['root_group']
  mode 0o644
  variables server_name: server_name, document_root: document_root,
            proxy_port: 9191
  # Reload apache immediately so the vhost is up and running by the time
  # certbot does its thing.
  notifies :reload, 'service[apache2]', :immediately
end

apache_site server_name do
  enable true
end

certbot_apache 'neon-sftp-bridge' do
  domains [server_name]
  email 'sitter@kde.org'
end
